trigger:
  - none

pool: Palo Alto Deployment Agent

parameters:
  - name: Firewall
    displayName: Please provide firewall name:-
    type: string
    default: No
    values:
      - Company West Europe
      - Company North Europe

  - name: UserMail
    displayName: Please provide your e-mail for repo commit:-
    type: string
    default:

  - name: UserName
    displayName: Please provide your name (john.smith) for repo commit:-
    type: string
    default:

  - name: ApplicationName
    displayName: Please provide appplication name:-
    type: string
    default:

  - name: RulePosition
    displayName: Please provide the position of rule set:-
    type: string
    default: Bottom
    values:
      - Top
      - Bottom

  - name: GenDescription
    displayName: Please provide if you want ChatGPT generates a description for the rule:-
    type: string
    default: Yes
    values:
      - Yes
      - No

variables:
  - name: OrganizationName
    ${{ if or(eq(parameters.Firewall, 'Company North Europe'), eq(parameters.Firewall, 'Company West Europe')) }}:
      value: Company

  - name: FirewallDeviceGroup
    ${{ if eq(parameters.Firewall, 'Company North Europe') }}:
      value: "cngfw-az-company-ne"
    ${{ if eq(parameters.Firewall, 'Company West Europe') }}:
      value: "cngfw-az-company-weu"

jobs:
  - job: generate_tf_files
    displayName: "npm > generate tf files for application"
    steps:
      - task: UseNode@1
        displayName: Install node.js
        inputs:
          version: "20.x"
      - script: |
          npm install
        displayName: Install dependencies of project
      - script: |
          npm run generate-terraform -- deviceGroupName=${{ variables.FirewallDeviceGroup }} applicationName=${{ lower(parameters.ApplicationName) }} useChatgpt=${{ lower(parameters.GenDescription) }} env=prod position=${{ lower(parameters.RulePosition) }}
        displayName: "Generate terraform files from script"

      # - job: "create_new_branch"
      #   displayName: "git > create new branch"
      #   dependsOn: 'generate_tf_files'
      # steps:
      - task: CmdLine@2
        displayName: Create a new branch and push to repo with files generated by the script
        inputs:
          script: |
            git clone https://$AccessToken@dev.azure.com/companysa/Security%20CI-CD/_git/Panorama
            cd Panorama
            git checkout -b "branch-$ApplicationName"

            # Make dir if it doesnt exist
            # mkdir $OrganizationName
            # mkdir $OrganizationName/$FirewallDeviceGroup
            mkdir -p $OrganizationName/$FirewallDeviceGroup/$ApplicationName

            # Copy the new .tf generated files in the repo
            cp -R ../$OrganizationName/$FirewallDeviceGroup/$ApplicationName/* $OrganizationName/$FirewallDeviceGroup/$ApplicationName/

            git config user.email $UserMail
            git config user.name $UserName
            # git add $OrganizationName/$FirewallDeviceGroup/$ApplicationName/*
            git pull
            git add $OrganizationName/$FirewallDeviceGroup/$ApplicationName/*
            git commit -m "Changes for $ApplicationName to $FirewallDeviceGroup" -m "The prisoner is $UserName ($UserMail)"
            # git merge origin "branch-$ApplicationName"
            git push -f https://$AccessToken@dev.azure.com/companysa/Security%20CI-CD/_git/Panorama
        env:
          AccessToken: $(PAT)
          UserMail: ${{ parameters.UserMail }}
          UserName: ${{ parameters.UserName }}
          FirewallDeviceGroup: ${{ variables.FirewallDeviceGroup }}
          ApplicationName: ${{ lower(parameters.ApplicationName) }}
          OrganizationName: ${{ variables.OrganizationName }}
      # - bash: |
      #     # Convert PAT to Base64
      #     PAT_BASE64=$(echo -n $(System.AccessToken) | base64)
      #   displayName: 'Convert PAT to Base64'
      #   name: convertBase64
      # - task: CmdLine@2
      #   displayName: Create PR
      #   inputs:
      #     script: |
      #       # Define variables
      #       ORGANIZATION_URL="https://dev.azure.com/companysa"
      #       PROJECT_NAME="Security%20CI-CD"
      #       REPOSITORY_NAME="Panorama"
      #       SOURCE_BRANCH="branch-$ApplicationName"
      #       TARGET_BRANCH="main"
      #       PR_TITLE="PR to merge $ApplicationName into main"
      #       PR_DESCRIPTION="$UserName created a PR for $ApplicationName ($FirewallDeviceGroup)"
      #       AUTH_HEADER="Authorization: Basic $(echo -n :$(System.AccessToken) | base64)"
      #       AUTH_HEADER_2="Authorization: Basic $AccessToken"
      #       # Create JSON data for the PR
      #       JSON_DATA=$(cat <<EOF
      #       {
      #         "sourceRefName": "refs/heads/$SOURCE_BRANCH",
      #         "targetRefName": "refs/heads/$TARGET_BRANCH",
      #         "title": "$PR_TITLE",
      #         "description": "$PR_DESCRIPTION"
      #       }
      #       EOF
      #       )

      #       echo $AUTH_HEADER
      #       echo $AUTH_HEADER_2
      #       echo $ORGANIZATION_URL/$PROJECT_NAME/_apis/git/repositories/$REPOSITORY_NAME/pullrequests?api-version=4.1
      #       # Create a PR using Azure DevOps REST API
      #       curl -X POST "$ORGANIZATION_URL/$PROJECT_NAME/_apis/git/repositories/$REPOSITORY_NAME/pullrequests?api-version=4.1" \
      #           -H "$AUTH_HEADER_2" \
      #           -H "Content-Type: application/json" \
      #           -d "$JSON_DATA"
      #   env:
      #     AccessToken: $(PAT)
      #     SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      #     UserName: ${{ parameters.UserName }}
      #     FirewallDeviceGroup: ${{ variables.FirewallDeviceGroup }}
      #     ApplicationName: ${{ lower(parameters.ApplicationName) }}

  - job: "terraform_init"
    displayName: "terrafrom > init valdiate plan"
    dependsOn: "generate_tf_files"
    steps:
      - task: CmdLine@2
        displayName: Fetch the application branch and terraform init, validate, and plan
        inputs:
          script: |
            # echo $(System.DefaultWorkingDirectory)
            # ls -l
            git clone -b "branch-$ApplicationName" https://$AccessToken@dev.azure.com/companysa/Security%20CI-CD/_git/Panorama
            # git checkout "branch-$ApplicationName"
            git branch -a
            # ls -l
            # cd Panorama
            # cd ${{ variables.OrganizationName }}
            # cd ${{ variables.FirewallDeviceGroup }}
            # cd ${{ parameters.ApplicationName}}
            # ls -l
            # cd $(System.DefaultWorkingDirectory)
            # pwd
        env:
          AccessToken: $(PAT)
          ApplicationName: ${{ lower(parameters.ApplicationName) }}
      - task: TerraformTaskV4@4
        displayName: Terraform init
        inputs:
          command: "init"
          provider: "azurerm"
          workingDirectory: "$(System.DefaultWorkingDirectory)/Panorama/${{ variables.OrganizationName }}/${{ variables.FirewallDeviceGroup }}/${{ parameters.ApplicationName }}"
          backendServiceArm: "PaloAltoSPN"
          backendAzureRmResourceGroupName: "rg-paloalto"
          backendAzureRmStorageAccountName: "stpaloaltoprdweu"
          backendAzureRmContainerName: "${{ variables.FirewallDeviceGroup }}"
          backendAzureRmKey: "${{ lower(parameters.ApplicationName) }}.tfstate"
      - task: TerraformTaskV4@04
        displayName: Terraform validate
        inputs:
          workingDirectory: "$(System.DefaultWorkingDirectory)/Panorama/${{ variables.OrganizationName }}/${{ variables.FirewallDeviceGroup }}/${{ parameters.ApplicationName }}"
          command: "validate"
      - task: TerraformTaskV4@04
        name: terraformPlan
        displayName: Terraform plan
        inputs:
          workingDirectory: "$(System.DefaultWorkingDirectory)/Panorama/${{ variables.OrganizationName }}/${{ variables.FirewallDeviceGroup }}/${{ parameters.ApplicationName }}"
          command: "plan"
          provider: "azurerm"
          environmentServiceNameAzureRM: "PaloAltoSPN"
          # commandOptions: '-out main.tfplan -lock=false'
        env:
          TF_VAR_api_key: $(API_KEY)
          TF_VAR_storage_key: $(STORAGE_KEY)

  - job: "waitForValidation"
    displayName: "Wait > Wait for manual appoval"
    dependsOn: "terraform_init"
    timeoutInMinutes: "10" # job times out in 10 min
    pool: server
    steps:
      - task: ManualValidation@0
        timeoutInMinutes: "30" # task times out in 30 min
        inputs:
          notifyUsers: |
            thanos.keske@gmail.com
          instructions: "Please review the output of Terraform plan before approving."
          onTimeout: "reject"

  - job: "terraform_apply"
    displayName: terraform > apply changes on Panorama
    dependsOn: "waitForValidation"
    steps:
      - task: CmdLine@2
        displayName: Fetch the application branch and terraform apply
        inputs:
          script: |
            git clone -b "branch-$ApplicationName" https://$AccessToken@dev.azure.com/companysa/Security%20CI-CD/_git/Panorama
            cd $(System.DefaultWorkingDirectory)
        env:
          AccessToken: $(PAT)
          ApplicationName: ${{ lower(parameters.ApplicationName) }}
      - task: TerraformTaskV4@4
        displayName: Terraform init
        inputs:
          command: "init"
          provider: "azurerm"
          workingDirectory: "$(System.DefaultWorkingDirectory)/Panorama/${{ variables.OrganizationName }}/${{ variables.FirewallDeviceGroup }}/${{ parameters.ApplicationName }}"
          backendServiceArm: "PaloAltoSPN"
          backendAzureRmResourceGroupName: "rg-paloalto"
          backendAzureRmStorageAccountName: "stpaloaltoprdweu"
          backendAzureRmContainerName: "${{ variables.FirewallDeviceGroup }}"
          backendAzureRmKey: "${{ lower(parameters.ApplicationName) }}.tfstate"
      - task: TerraformTaskV4@4
        displayName: Teeraform apply
        # condition: eq(variables['terraformPlan.changesPresent'], 'true')
        inputs:
          workingDirectory: "$(System.DefaultWorkingDirectory)/Panorama/${{ variables.OrganizationName }}/${{ variables.FirewallDeviceGroup }}/${{ parameters.ApplicationName }}"
          command: "apply"
          environmentServiceNameAzureRM: "PaloAltoSPN"
          commandOptions: "-auto-approve -parallelism=1"
        env:
          TF_VAR_api_key: $(API_KEY)
          TF_VAR_storage_key: $(STORAGE_KEY)

      - bash: |
          curl -v -k -X GET "https://192.168.233.132/api/?key=$(API_KEY)&type=commit&cmd=<commit-all></commit-all>"
        displayName: "Commit on Panorama"
        name: CommitOnPanorama
        env:
          FirewallDeviceGroup: ${{ variables.FirewallDeviceGroup }}
          API_KEY: $(API_KEY)
